{%- macro insert_value(value) -%}{#- Inserts the value correctly formatted and quoted for UCL -#}
	{%- if value | type == "bool" -%}
		{#- bool -#}
		{{ value | bool | lower }}
	{%- elif value | type == "int" or value | type == "float" -%}
		{#- numeric -#}
		{{ value }}
	{%- elif value | type == "unicode" or value | type == "AnsibleUnsafeText" or value | type == "str" or value | type == "AnsibleUnicode" -%}
		{%- if value | regex_search('^([0-9])+(.[0-9]+)?(s|m|h|d|min)$') -%}
			{#- time -#}
			{{ value }}
		{%- else -%}
			{#- string -#}
			{{ value | to_json }}
		{%- endif -%}
	{%- else -%}
		{{ "Your rspamd_config contains an invalid value"/0 }}
	{%- endif -%}
{%- endmacro -%}

{% macro is_complex(var) %}{#- Checks whether a list contains another list or dict -#}
{%- for item in var -%}
	{%- if item | type == "dict" or item | type == "dict" -%}
		True
	{%- endif -%}
{%- endfor -%}
{% endmacro %}

{%- macro insert_dict(key, value) -%}{#- Formats a variable for inserting it into UCL -#}
	{%- if value | type == "list" -%}
		{#- list: If one of the items is complex, repeatedly define them, otherwise use an array -#}
		{%- if is_complex(value) | length > 0 -%}{#- Implementing this by setting a variable is not possible because Jinja fails unexpectedly when using 'is defined' in this macro -#}
			{%- for item in value -%}
			{{ insert_dict(key, item) }}
			{%- endfor -%}
		{%- else -%}
			{{ key }} = [
			{%- for item in value -%}
				{{ insert_value(item) }}{{ ", " if not loop.last else "" }}
			{%- endfor -%}
			]
		{%- endif -%}
	{%- elif value | type == "dict" -%}
		{#- dict -#}
		{{ key }} {
{% for k, v in value.items() %}
	{{ insert_dict(k, v) }}
{% endfor -%}
		}
	{%- else -%}
		{# simple type like string, number, bool -#}
		{{ key }} = {{ insert_value(value) }};
	{%- endif -%}
{%- endmacro -%}
